#include <iostream>
using namespace std;

bool isSafe(int board[], int row, int col, int n) {
    for (int i = 0; i < row; i++) {
        // same column
        if (board[i] == col)
            return false;
        // diagonal: difference in columns equals difference in rows
        int diffCol = board[i] - col;
        int diffRow = row - i;
        if (diffCol == diffRow || diffCol == -diffRow)
            return false;
    }
    return true;
}

void printBoard(int board[], int n) {
    for (int r = 0; r < n; r++) {
        for (int c = 0; c < n; c++) {
            if (board[r] == c) cout << "Q ";
            else cout << ". ";
        }
        cout << "\n";
    }
    cout << "\n";
}

void solveNQueens(int board[], int n, int row) {
    if (row == n) {
        printBoard(board, n);
        return;
    }
    for (int col = 0; col < n; col++) {
        if (isSafe(board, row, col, n)) {
            board[row] = col;
            solveNQueens(board, n, row + 1);
            board[row] = -1; // backtrack
        }
    }
}

int main() {
    int n;
    cout << "Enter N: ";
    cin >> n;

    int *board = new int[n];
    for (int i = 0; i < n; i++) board[i] = -1;

    solveNQueens(board, n, 0);

    delete[] board;
    return 0;
}
