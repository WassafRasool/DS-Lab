#include <iostream>
using namespace std;

const int N = 5;

bool isSafe(int maze[N][N], int x, int y, bool visited[N][N]) {
    return (x>=0 && x<N && y>=0 && y<N && maze[x][y]==1 && !visited[x][y]);
}

bool solveMaze(int maze[N][N], int x, int y, int sol[N][N], bool visited[N][N]) {
    if (x==N-1 && y==N-1) {
        sol[x][y]=1;
        return true;
    }
    if (isSafe(maze,x,y,visited)) {
        visited[x][y]=true;
        sol[x][y]=1;
        if (solveMaze(maze,x+1,y,sol,visited)) return true;
        if (solveMaze(maze,x,y+1,sol,visited)) return true;
        if (solveMaze(maze,x-1,y,sol,visited)) return true;
        if (solveMaze(maze,x,y-1,sol,visited)) return true;
        sol[x][y]=0;
        visited[x][y]=false;
    }
    return false;
}

void printSolution(int sol[N][N]) {
    for (int i=0;i<N;i++) {
        for (int j=0;j<N;j++) cout<<sol[i][j]<<" ";
        cout<<endl;
    }
}

int main() {
    int maze[N][N]={
        {1,0,0,0,0},
        {1,1,0,1,1},
        {0,1,1,1,0},
        {1,0,0,1,1},
        {1,1,1,0,1}
    };
    int sol[N][N]={0};
    bool visited[N][N]={false};
    if (solveMaze(maze,0,0,sol,visited)) printSolution(sol);
    else cout<<"No path exists\n";
    return 0;
}
