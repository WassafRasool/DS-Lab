#include <iostream>
using namespace std;

bool isSafe(int** arr, int x, int y, int n) {
    if (x < n && y < n && arr[x][y] == 1) {
        return true;
    }
    return false;
}

bool ratInMaze(int** arr, int x, int y, int n, int** solArr) {
    if ((x == n - 1) && (y == n - 1)) { // destination reached
        solArr[x][y] = 1;
        return true;
    }

    if (isSafe(arr, x, y, n)) {
        solArr[x][y] = 1;

        // move forward in x direction (right)
        if (ratInMaze(arr, x + 1, y, n, solArr)) {
            return true;
        }

        // move down in y direction
        if (ratInMaze(arr, x, y + 1, n, solArr)) {
            return true;
        }

        // backtracking
        solArr[x][y] = 0;
        return false;
    }

    return false;
}

int main() {
    int n;
    cout << "Enter size of maze (N): ";
    cin >> n;

    // dynamically allocate maze
    int** arr = new int*[n];
    for (int i = 0; i < n; i++)
        arr[i] = new int[n];

    cout << "Enter maze (0 for blocked, 1 for open):" << endl;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            cin >> arr[i][j];

    // solution matrix
    int** solArr = new int*[n];
    for (int i = 0; i < n; i++) {
        solArr[i] = new int[n];
        for (int j = 0; j < n; j++)
            solArr[i][j] = 0;
    }

    if (ratInMaze(arr, 0, 0, n, solArr)) {
        cout << "\nPath found:\n";
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++)
                cout << solArr[i][j] << " ";
            cout << endl;
        }
    } else {
        cout << "\nNo path found!";
    }

    // free memory
    for (int i = 0; i < n; i++) {
        delete[] arr[i];
        delete[] solArr[i];
    }
    delete[] arr;
    delete[] solArr;

    return 0;
}
