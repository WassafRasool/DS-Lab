#include <iostream>
using namespace std;

struct SNode {
    int data;
    SNode* next;
};

struct DNode {
    int data;
    DNode* next;
    DNode* prev;
};

DNode* convertToDoubly(SNode* head) {
    if (!head) return NULL;
    DNode* dhead = NULL, *dtail = NULL;
    while (head) {
        DNode* newNode = new DNode{head->data, NULL, dtail};
        if (!dhead) dhead = newNode;
        else dtail->next = newNode;
        dtail = newNode;
        head = head->next;
    }
    return dhead;
}

SNode* convertToCircular(SNode* head) {
    if (!head) return NULL;
    SNode* temp = head;
    while (temp->next) temp = temp->next;
    temp->next = head;
    return head;
}

void displayDoubly(DNode* head) {
    cout << "Doubly Linked List: ";
    while (head) {
        cout << head->data << " ";
        head = head->next;
    }
    cout << endl;
}

void displayCircular(SNode* head, int n) {
    cout << "Circular Linked List: ";
    SNode* temp = head;
    for (int i = 0; i < n; i++) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << "(back to head)" << endl;
}

int main() {
    int n, val;
    cout << "Enter number of elements: ";
    cin >> n;
    cout << "Enter elements: ";
    SNode* slist = NULL, *tail = NULL;
    for (int i = 0; i < n; i++) {
        cin >> val;
        SNode* newNode = new SNode{val, NULL};
        if (!slist) slist = tail = newNode;
        else { tail->next = newNode; tail = newNode; }
    }
    cout << "Singly Linked List: ";
    SNode* temp = slist;
    while (temp) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
    DNode* dlist = convertToDoubly(slist);
    displayDoubly(dlist);
    SNode* clist = convertToCircular(slist);
    displayCircular(clist, n);
    return 0;
}
