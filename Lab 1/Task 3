#include <iostream>
using namespace std;

class Box {
private:
    int* data;
public:
    Box(int value=0){data=new int(value);}
    ~Box(){delete data;}
    Box(const Box& other){data=new int(*other.data);}
    Box& operator=(const Box& other){
        if(this!=&other){
            delete data;
            data=new int(*other.data);
        }
        return *this;
    }
    void setValue(int value){*data=value;}
    int getValue() const{return *data;}
    void display() const{cout<<"Value: "<<*data<<" | Address: "<<data<<endl;}
};

int main(){
    cout<<"---- Demonstrating Deep Copy ----"<<endl;
    Box b1(10);
    cout<<"b1: ";b1.display();
    Box b2=b1;
    cout<<"b2 (after deep copy from b1): ";b2.display();
    b2.setValue(20);
    cout<<"After modifying b2:"<<endl;
    cout<<"b1: ";b1.display();
    cout<<"b2: ";b2.display();
    Box b3;
    b3=b1;
    cout<<"\nb3 (after deep assignment from b1): ";b3.display();
    b3.setValue(30);
    cout<<"After modifying b3:"<<endl;
    cout<<"b1: ";b1.display();
    cout<<"b3: ";b3.display();
    return 0;
}
